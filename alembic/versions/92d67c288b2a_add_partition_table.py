"""Add partition table

Revision ID: 92d67c288b2a
Revises: 036d93d8f77d
Create Date: 2025-03-18 15:01:06.850300

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "92d67c288b2a"
down_revision: Union[str, None] = "036d93d8f77d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("ALTER TABLE sessions RENAME TO sessions_old;")
    op.execute("ALTER INDEX idx_session_user_id RENAME TO idx_session_old_user_id;")

    op.execute(
        """
        CREATE TABLE sessions (
            id UUID NOT NULL,
            user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
            user_agent VARCHAR(255) NOT NULL,
            jti UUID NOT NULL,
            refresh_token VARCHAR(1055) NOT NULL,
            user_ip VARCHAR(255),
            is_active BOOLEAN NOT NULL DEFAULT TRUE,
            device_type VARCHAR(55) NOT NULL,
            created_at TIMESTAMP NOT NULL DEFAULT now(),
            updated_at TIMESTAMP NOT NULL DEFAULT now(),
            PRIMARY KEY (id, device_type)
        ) PARTITION BY LIST (device_type);
    """
    )

    op.create_index("idx_sessions_jti", "sessions", ["jti", "device_type"], unique=True)
    op.create_index("idx_sessions_refresh_token", "sessions", ["refresh_token", "device_type"], unique=True)
    op.create_index("idx_sessions_user_id", "sessions", ["user_id"])

    op.execute("CREATE TABLE IF NOT EXISTS sessions_desktop PARTITION OF sessions FOR VALUES IN ('desktop');")
    op.execute("CREATE TABLE IF NOT EXISTS sessions_smart PARTITION OF sessions FOR VALUES IN ('smart');")
    op.execute("CREATE TABLE IF NOT EXISTS sessions_mobile PARTITION OF sessions FOR VALUES IN ('mobile');")
    op.execute("CREATE TABLE sessions_other PARTITION OF sessions DEFAULT;")

    op.execute(
        """
        INSERT INTO sessions (id, user_id, user_agent, jti, refresh_token, user_ip, is_active, device_type, created_at, updated_at)
        SELECT id, user_id, user_agent, jti, refresh_token, user_ip, is_active, 'other', created_at, updated_at FROM sessions_old;
    """
    )

    op.execute("DROP TABLE sessions_old;")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("ALTER TABLE sessions RENAME TO sessions_old;")
    op.create_table(
        "sessions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("user_agent", sa.String(length=255), nullable=False),
        sa.Column("jti", sa.UUID(), nullable=False),
        sa.Column("refresh_token", sa.String(length=1055), nullable=False),
        sa.Column("user_ip", sa.String(length=255), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("jti"),
        sa.UniqueConstraint("refresh_token"),
    )
    op.create_index("idx_session_user_id", "sessions", ["user_id"], unique=False)

    op.execute(
        """
        INSERT INTO sessions (id, user_id, user_agent, jti, refresh_token, user_ip, is_active, created_at, updated_at)
        SELECT id, user_id, user_agent, jti, refresh_token, user_ip, is_active, created_at, updated_at FROM sessions_old;
    """
    )

    op.execute("DROP TABLE IF EXISTS sessions_other;")
    op.execute("DROP TABLE IF EXISTS sessions_desktop;")
    op.execute("DROP TABLE IF EXISTS sessions_smart;")
    op.execute("DROP TABLE IF EXISTS sessions_mobile;")
    op.execute("DROP TABLE IF EXISTS sessions_old;")
    # ### end Alembic commands ###
